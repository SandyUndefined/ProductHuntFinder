    import express from "express";
    import { createServer } from "http";
    import session from "express-session";
    import MemoryStore from "memorystore";
    import path from "path";
    import fs from "fs";
    import { registerRoutes } from "./routes";
    import { setupVite, serveStatic } from "./vite";
    import { logger } from "./utils/logger";
    import { initializeEmailService } from "./services/email-service";
    import { optimizeDatabase, analyzeDatabase } from "./db-optimize";

    const app = express();
    const port = process.env.PORT || 5000;
    const httpServer = createServer(app);

    // Basic Middleware
    app.use(express.json());
    app.use(express.urlencoded({ extended: true }));

    // Health Check
    app.get("/health", (_req, res) => {
      logger.info("Health passed");
      res.status(200).send("OK");
    });

    // Session Store
    const SessionStore = MemoryStore(session);
    if (process.env.NODE_ENV === "production" && !process.env.SESSION_SECRET) {
      logger.warn("SESSION_SECRET not set; using insecure random value");
    }

    app.use(
      session({
        secret:
          process.env.SESSION_SECRET ||
          (process.env.NODE_ENV === "production"
            ? `secure-${Date.now()}-${Math.random().toString(36).substring(2, 15)}`
            : "your-secret-key"),
        resave: false,
        saveUninitialized: false,
        store: new SessionStore({
          checkPeriod: 86400000,
        }),
      }),
    );

    // Static File Serving
    app.use(
      express.static(path.join(process.cwd(), "public"), {
        maxAge: "1h",
        index: false,
      }),
    );

    // Production Static Setup
    if (process.env.NODE_ENV === "production") {
      const distPath = path.resolve(process.cwd(), "dist", "public");
      logger.info(`Serving static files from: ${distPath}`);

      if (fs.existsSync(distPath)) {
        app.use(express.static(distPath));
        const indexPath = path.join(distPath, "index.html");

        if (fs.existsSync(indexPath)) {
          app.get("*", (_req, res) => res.sendFile(indexPath));
          logger.info("Production static file serving configured");
        } else {
          logger.error(`Index file not found: ${indexPath}`);
        }
      } else {
        logger.error(`Static directory not found: ${distPath}`);
      }
    }

    // CORS Middleware
    app.use((req, res, next) => {
      const allowedOrigins = [
        "localhost",
        ".replit.dev",
        ".replit.app",
        req.headers.host || "",
      ];
      const origin = req.headers.origin || "";
      if (allowedOrigins.some((allowed) => origin.includes(allowed))) {
        res.header("Access-Control-Allow-Origin", origin);
      }

      res.header(
        "Access-Control-Allow-Headers",
        "Origin, X-Requested-With, Content-Type, Accept",
      );
      res.header(
        "Access-Control-Allow-Methods",
        "GET, POST, PUT, DELETE, OPTIONS",
      );
      next();
    });

    // Start Server
    httpServer.listen(Number(port), "0.0.0.0", () => {
      logger.info(
        `Server started successfully on port ${port} in ${process.env.NODE_ENV || "development"} mode`,
      );
      console.log(
        `${new Date().toLocaleTimeString()} [express] Server is running on port ${port}`,
      );
    });

    logger.info(
      `Attempting to start server on port ${port} (from env: ${process.env.PORT}, NODE_ENV: ${process.env.NODE_ENV || "development"})`,
    );

    // Async Init Block
    (async () => {
      try {
        initializeEmailService();

        logger.info("Starting database optimization");
        const optimizationResult = await optimizeDatabase();
        if (optimizationResult) {
          logger.info("Database optimization completed successfully");
          await analyzeDatabase();
        } else {
          logger.warn("Database optimization failed, continuing with unoptimized DB");
        }

        // Register Routes
        await registerRoutes(app);

        // Setup Vite Middleware (Development Only)
        if (process.env.NODE_ENV !== "production") {
          await setupVite(app, httpServer);
          logger.info("Vite middleware configured for development");
        }
      } catch (error) {
        logger.error("Failed to initialize services", { error });
        process.exit(1);
      }
    })();

    // Error Middleware (Global)
    app.use((err: any, _req: express.Request, res: express.Response, _next: express.NextFunction) => {
      const status = err.status || err.statusCode || 500;
      let message = err.message || "Internal Server Error";

      if (
        err.type === 'entity.too.large' ||
        err.code === 'LIMIT_FILE_SIZE' ||
        message.includes('entity too large') ||
        message.includes('request entity too large')
      ) {
        message = "File or request size is too large. Please reduce the file size or use a file with fewer contacts.";
        console.error("Payload too large error:", err);
        return res.status(413).json({
          message,
          error: "PAYLOAD_TOO_LARGE",
          suggestions: [
            "Try importing a smaller CSV file (under 50MB)",
            "Split your data into multiple smaller files",
            "Use the Direct Import feature with batches of up to 5,000 contacts"
          ]
        });
      }

      logger.error("Unhandled error:", err);
      res.status(status).json({ message });
    });

    // HTTP Server Error Handling
    httpServer.on("error", (error: Error) => {
      logger.error("Server error:", error);
      process.exit(1);
    });
